class __DL_Array { // implies "extends Object"
    protected int __dl_bufptr;
    protected int __dl_length;
    protected int __dl_bsize;

    protected void init() { // hide constructor.
        // implies super.init()
        // return; // return with no argument
    }

    static __DL_Array __dl_create(int len, int bsize) {
        __DL_Array a = new __DL_Array();
        a.__dl_bufptr = __dlib_malloc(len * bsize);
        a.__dl_length = len;
        a.__dl_bsize = bsize;
        return a;
    }

    static __DL_Array __dl_copyFromCBytes(int ptr, int len, int bsize) {
        __DL_Array a = __DL_Array.__dl_create(len, bsize);
        __dlib_memcpy(a.__dl_bufptr, ptr, len * bsize);
        return a;
    }

    protected void __dl_decref() {
        if (this.__dl_ref == 0) {
            __dlib_free(this.__dl_bufptr);
        }
        super.__dl_decref();
    }

    int __dl_get(int idx) {
        return __dlib_arr_get(this.__dl_bufptr, idx, this.__dl_bsize);
    }

    void __dl_set(int idx, int d) {
        __dlib_arr_set(this.__dl_bufptr, d, idx, this.__dl_bsize);
    }

    int length() {
        return this.__dl_length;
    }

    protected void __dl_putstr() {
        __dlib_print_str(this.__dl_bufptr, this.__dl_length);
    }
}

class __DL_RefArray extends __DL_Array {
    // FIXME: what about set()?

    protected void __dl_decref() {
        if (this.__dl_ref == 0) {
            for (int i = 0; i < this.__dl_length; i++) {
                ((Object)this.__dl_get(i)).__dl_decref();
            }
        }
        super.__dl_decref();
    }
}
